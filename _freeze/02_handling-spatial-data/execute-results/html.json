{
  "hash": "c2f3e2ec07b08602e3bbde4b26793900",
  "result": {
    "engine": "knitr",
    "markdown": "---\nfilters:\n  - code-visibility\nexecute: \n  freeze: auto\n  cache: true\nfig-width: 5\nfig-asp: 0.75\neditor_options: \n  chunk_output_type: console\n---\n\n::: {.cell}\n\n:::\n\n\n\n\n\n\n\n\n# Handling of spatial data in R {#sec-handling-data}\n\n## Introduction\n\nGeostatistical analysis primarily deals with **point-referenced data**. However, geostatistical modeling often requires more than just point data, **raster** and **areal (polygon)** data are frequently used to build essential covariates, enhance spatial understanding, or provide environmental context. For instance, population density, climate data, land use, and elevation, often key covariates in many spatial analyses, usually come in raster or polygon formats. Efficient handling of these different data types is critical for successful model-building. This chapter provides a comprehensive guide to the various stages of managing spatial data in R, using the `sf` and `terra` packages, to support a complete geostatistical workflow.\n\n## Spatial data handling in geostatistical analysis\n\nThroughout a geostatistical analysis, handling spatial data takes place at multiple key stages:\n\n1.  **Retrieving External Spatial Data Sources**: Before starting the modeling process, one often needs to acquire spatial datasets from external sources to improve model accuracy. These could include satellite-derived environmental variables, population data from [WorldPop](https://www.worldpop.org/), or climate data from [WorldClim](https://www.worldclim.org/). Acquiring these datasets and ensuring they are in compatible formats and resolutions is an essential early step in spatial analysis.\n\n2.  **Importing and Standardizing Spatial Data**: Once external data is obtained, it must be imported into R. This involves handling various file formats such as shapefiles or geopackages for vector data and GeoTIFFs for raster data. Moreover, different datasets might use different **Coordinate Reference Systems (CRS)**, requiring CRS standardization to ensure that all datasets align correctly. Failure to standardize CRS can result in spatial misalignments and incorrect results.\n\n3.  **Extracting Covariate Information for Modeling**: Covariate extraction is an essential step in geostatistical modeling. After importing spatial data, it is necessary to extract relevant covariate information both for the **sampled locations** (where we have observed data) and the **prediction locations** (where we wish to make predictions). This step involves linking raster or polygonal covariates, such as climate, population, or land cover data, to the geostatistical data points.\n\n4.  **Prediction and Creation of a Spatial Grid**: For predictive geostatistical models, a regular grid of points is often created over the study region. Covariates must then be assigned to each grid point to make predictions across the entire region of interest. Creating predictive grids and linking them to the necessary covariates is key to generating continuous spatial predictions from geostatistical models.\n\n5.  **Visualizing Spatial Data**: Visualization is crucial for exploring spatial data, interpreting model results, and communicating findings. Whether working with point-referenced data, polygons, or rasters, clear and effective visualization helps reveal patterns that inform the modeling process. Effective visualization can also help highlight covariate trends, spatial clusters, and uncertainty in predictions.\n\n## Accessing covariates for disease mapping\n\nCovariates can play a crucial role in understanding and modeling the spatial variation in disease risk. In geostatistical analysis, incorporating environmental, demographic, and climatic variables might improve the predictive power of models or at least reduce the level of uncertainty in the predictions. These covariates can influence factors such as the spread of infectious diseases, the distribution of disease vectors, and the socio-economic conditions that impact health outcomes.\n\nA wide range of open-access spatial datasets provide covariates for disease mapping. These include population density, climate, land cover, and human infrastructure data, which often come in raster or polygon formats. Alongside these environmental covariates, administrative boundaries are also crucial for public health analysis, as they help organize and aggregate data at different levels (e.g., country, region, or district). For example, aggregating health outcomes or covariate data by administrative units allows researchers to identify geographic disparities and allocate resources accordingly. Fortunately, open-source platforms such as [geoBoundaries](https://www.geoboundaries.org/) provide easily accessible administrative boundary data for many countries at various levels of granularity. This data is available in formats compatible with geospatial analysis tools in R, making it easy to integrate into geostatistical workflows.\n\n@tbl-data-sources below summarizes key sources of covariates useful in disease mapping. Each dataset offers specific types of data, from satellite-derived environmental variables to gridded population estimates and administrative boundaries, which can be accessed through various R packages or APIs.\n\n| **Source**              | **Data Type**                   | **Description**                              | **R Package**        |\n|-------------------------|---------------------------------|----------------------------------------------|----------------------|\n| **WorldClim**           | Climate (temperature, rainfall) | Global climate data                          | `geodata`            |\n| **MODIS**               | Remote Sensing                  | Satellite imagery (e.g., vegetation indices) | `MODIStsp`           |\n| **OpenStreetMap (OSM)** | Human settlements, roads        | Global geographic features                   | `osmdata`            |\n| **Google Earth Engine** | Satellite imagery               | Large-scale environmental data analysis      | `rgee`               |\n| **WorldPop**            | Population data                 | Gridded population density estimates         | `wpgpDownloadR` |\n\n: Some key sources of covariates useful in disease mapping and R packages to retrieve them. {#tbl-data-sources}\n\n### Example: Downloading administrative boundaries\n\nAdministrative boundaries provide an essential spatial structure for many types of geostatistical analyses, particularly in disease mapping where data is often aggregated by administrative units such as regions, districsts or provinces. The [geoBoundaries](https://www.geoboundaries.org/) datasets, which are accessible via the `rgeoboundaries` package, provide openly available administrative boundary data for nearly every country, allowing researchers to integrate these boundaries into their analyses seamlessly.\n\n\n\n\n\n\n\n\n::: {#fig-liberia-admin .cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\npar(mar = c(0, 0, 0, 0))  #| hide_line\n# Load the rgeoboundaries package\nlibrary(rgeoboundaries)\n\n# Download administrative boundaries for Liberia (level 0: country)\nliberia_admin0 <- gb_adm0(\"Liberia\")\n\n# Do the same for level 1: regions\nliberia_admin1 <- gb_adm1(\"Liberia\")\n\n# Plot the administrative boundaries\nplot(liberia_admin0$geometry)\nplot(liberia_admin1$geometry)\n```\n\n::: {.cell-output-display}\n![Adimin level 0](02_handling-spatial-data_files/figure-html/fig-liberia-admin-1.png){#fig-liberia-admin-1}\n:::\n\n::: {.cell-output-display}\n![Admin level 1](02_handling-spatial-data_files/figure-html/fig-liberia-admin-2.png){#fig-liberia-admin-2}\n:::\n\nAdministrative boundaries for Liberia retrieved using the `rgeoboundaries` package.\n\n:::\n\n\n\n\n\n\n\n\n### Example: Downloading population data {#sec-pop-data}\n\nPopulation density is a key covariate in geostatistical models for public health research. In this section, we demonstrate how to retrieve high-resolution population data for Liberia from [WorldPop](https://www.worldpop.org/) using the `wpgpDownloadR` package. This package provides easy access to the WorldPop datasets, which offers gridded population estimates at various spatial resolutions.\n\nBefore downloading the data, we will search for available datasets for Liberia. The function `wpgpListCountryDatasets()` helps in retrieving a list of all available datasets for a specified country.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(wpgpDownloadR)\n\n# Search for datasets available for Liberia \n# usign the ISO3 country code\nlbr_datasets <- wpgpListCountryDatasets(ISO3 = \"LBR\")\n```\n:::\n\n\n\n\n\n\n\n\nWe can check the description column to see what datasets are available. Let's download the population data for Liberia for the year 2014 at a 100m resolution. The `wpgpGetCountryDataset` function will then download a raster dataset based on ISO3 code and covariate name.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlbr_pop_url <- wpgpGetCountryDataset(ISO3 = \"LBR\", covariate = \"ppp_2014\") \n```\n:::\n\n\n\n\n\n\n\n\nThis will download a raster file locally in a temporary directory. The path to the downloaded file is contained in the `lbr_pop_url` variable and when we introduce the `terra` package in the next sections we will show how to upoload the population raster into R. It is also possible to specify the directory where we want the raster to be downloaded using the `destDir` argument.\n\n### Example: Dowloading data using Google Earth Engine\n\nGoogle Earth Engine (GEE) is a powerful platform that hosts petabytes of environmental and geospatial data, including climate, topography, and land cover datasets. The `rgee` R package provides a convenient interface to GEE from within R. \n\n> ðŸ”— **Getting started with `rgee`**: To use `rgee`, you need a Google account and must complete a one-time setup process. Follow the official guide here: [https://r-spatial.github.io/rgee/](https://r-spatial.github.io/rgee/). For further tutorials and use cases, see: [https://csaybar.github.io/rgee-examples/](https://csaybar.github.io/rgee-examples/).\n\nIn this example, we retrieve elevation data for Liberia using the [SRTM 90m dataset](https://developers.google.com/earth-engine/datasets/catalog/CGIAR_SRTM90_V4). The steps include initializing Earth Engine, access the desired data product with the `ee$Image(\"ASSET_ID\")` function (the `ASSET_ID` can be found on the dataset page under *Earth Engine Snippet*), converting the boundary of Liberia into a format readable by GEE, clipping the global elevation raster to that boundary, and downloading the result as a raster object in R. This process demonstrates how `rgee` can be integrated into a geostatistical workflow to enrich your data with high-quality environmental covariates.\n\n::: {.callout-note}\nThis example assumes you have already completed `rgee` setup and authenticated using `ee_Initialize()`.\n:::\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load required packages\nlibrary(rgee)  \n\n# Initialize Earth Engine (first time will prompt browser login)\nee_Initialize(quiet = T)\n\n# Convert Liberia boundary to Earth Engine Geometry\nliberia_ee <- sf_as_ee(liberia_admin0)\n\n# Access the global SRTM elevation dataset from Earth Engine\nelev <- ee$Image(\"CGIAR/SRTM90_V4\")\n\n# You can check general info about the data produc with ee_print\nee_print(elev)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nâ”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€ Earth Engine Image â”€â”€\nImage Metadata:\n - Class                      : ee$Image\n - ID                         : CGIAR/SRTM90_V4\n - system:time_start          : 2000-02-11\n - system:time_end            : 2000-02-22\n - Number of Bands            : 1\n - Bands names                : elevation\n - Number of Properties       : 25\n - Number of Pixels*          : 62208576001\n - Approximate size*          : 17.53 GB\nBand Metadata (img_band = elevation):\n - EPSG (SRID)                : WGS 84 (EPSG:4326)\n - proj4string                : +proj=longlat +datum=WGS84 +no_defs\n - Geotransform               : 0.000833333333333 0 -180 0 -0.000833333333333 60\n - Nominal scale (meters)     : 92.76624\n - Dimensions                 : 432001 144001\n - Number of Pixels           : 62208576001\n - Data type                  : INT\n - Approximate size           : 17.53 GB\n â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€â”€\n NOTE: (*) Properties calculated considering a constant geotransform and data type.\n```\n\n\n:::\n\n```{.r .cell-code}\n# Clip the elevation data to Liberia\nelev_liberia <- elev$clip(liberia_ee)\n\n# Download clipped elevation data as a raster using Google Drive\nelev_rast <- ee_as_rast(\n  image = elev_liberia,\n  region = liberia_ee$geometry(),\n  via = \"drive\",\n  scale = 1000, # Aggregate to 1000 meters\n  quiet = T\n)\n\n# Replace 0s with NAs as these are usually elevation values \n# where no data exists due to clipping or ocean masking.\nelev_rast[elev_rast == 0] <- NA\n\n# Plot the result\nterra::plot(elev_rast, main = \"Elevation in Liberia (m)\")\nplot(liberia_admin0$geometry, add = T)\n```\n\n::: {.cell-output-display}\n![Elevation (m) in Liberia retrieved via Google Earth Engine (SRTM).](02_handling-spatial-data_files/figure-html/fig-rgee-elevation-1.png){#fig-rgee-elevation}\n:::\n:::\n\n\n\n\n\n\n\n\n## Importing and standardizing spatial data\n\nIn geostatistical analysis, importing and standardizing spatial data is a critical step to ensure that data from different sources align and can be used effectively. Spatial data, whether it's vector data (points, lines, polygons) or raster data (grids), can come in various formats and may use different **Coordinate Reference Systems (CRS)**. To perform accurate spatial analyses, it's essential to import data correctly and ensure consistency in terms of projection and format. This section will cover how to import vector and raster data into R, explain the concept of CRS and sensure that different datasets align properly for subsequent geostatistical analysis.\n\n### Importing vector data\n\nVector data are typically stored in formats such as **shapefiles** (`.shp`) or **geopackages** (`.gpkg`). The `sf` (simple features) package in R is the most common tool for handling vector data.\n\n\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the sf package\nlibrary(sf)\n\n# Import a shapefile (e.g., administrative boundaries)\nadmin <- st_read(\"path_to_your_shapefile/Admin_Boundaries.shp\")\n\n# Inspect the data\nprint(admin)\nplot(admin)  # Basic plot of the shapefile\n```\n:::\n\n\n\n\n\n\n\n\nThe `st_read()` function reads various spatial data formats, automatically recognizing file types.\n\n### Importing raster data\n\nRaster data consists of a grid of cells, where each cell holds a value representing a spatial attribute such as elevation or temperature. The `terra` package in R is designed to work with raster data and has superseded the older `raster` package due to better performance and greater functionality. Let's see now how to import a GeoTIFF file using `terra`. We can upload the population raster for Liberia that we have downloaded in @sec-pop-data.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the terra package\nlibrary(terra)\n\n# Import a raster file \nlbr_pop_100 <- rast(lbr_pop_url)\n\n# Inspect the raster data\nprint(lbr_pop_100)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nclass       : SpatRaster \nsize        : 5040, 4945, 1  (nrow, ncol, nlyr)\nresolution  : 0.0008333333, 0.0008333333  (x, y)\nextent      : -11.48625, -7.365417, 4.352084, 8.552084  (xmin, xmax, ymin, ymax)\ncoord. ref. : lon/lat WGS 84 (EPSG:4326) \nsource      : lbr_ppp_2014.tif \nname        : lbr_ppp_2014 \nmin value   :  0.006426936 \nmax value   : 92.716874581 \n```\n\n\n:::\n\n```{.r .cell-code}\n# Basic plot of the raster (log-scale)\nplot(log(lbr_pop_100), main = \"Population per 100m (log-scale)\")\nplot(liberia_admin0$geometry, add = T)\n```\n\n::: {.cell-output-display}\n![Liberia population count for 2014 at 100m resolution (log-scale).](02_handling-spatial-data_files/figure-html/fig-lbr-pop-1.png){#fig-lbr-pop}\n:::\n:::\n\n\n\n\n\n\n\n\nThe output of `print()` provides a detailed summary of the raster's properties. The `rast()` function reads raster files in formats like GeoTIFF, ASCII grid, or other common raster formats and then we used `plot()` as a quick way to visualize raster data.\n\n### Understanding coordinate reference systems (CRS)\n\nWhen working with spatial data, especially from different sources, one of the most critical tasks is ensuring that all datasets share the same **Coordinate Reference System (CRS)**. A CRS defines how the two-dimensional map data corresponds to locations on the three-dimensional Earth. If different layers (e.g., raster and vector data) have different CRSs, they may not align correctly when plotted or analyzed together, leading to inaccurate analyses or visualizations.\n\nCRSs can either be:\n\n-   **Geographic**: These use latitude and longitude coordinates to represent locations on the Earth's surface. The most common example is **WGS84** (EPSG:4326), the default CRS used by GPS and global datasets.\n\n-   **Projected**: These convert the Earth's curved surface to a flat map and preserve certain properties like area, distance, or direction. Examples include **Universal Transverse Mercator (UTM)** or **Albers Equal Area** projections.\n\nIn many cases, using a projected rather than a geographic CRS is preferred, especially when any summary statistic or parameter is distance-related. In a geographic CRS, distances between two points are calculated using angular coordinates (degrees), which do not translate easily into linear units like meters or kilometers. This makes interpreting distances challenging, as the length of a degree of latitude differs from the length of a degree of longitude. In contrast, a projected CRS uses a linear coordinate system (usually meters), ensuring that distances are accurately represented on a flat surface. This is important when computing spatial variograms, covariance functions, or some parameters in geostatistical models, where distance between sampling locations is a key factor. In this context, we assume that the default distance metric is Euclidean distance. However, an important exception to our recommendation arises when analyzing data across large, global-scale regions. In such cases, it is more appropriate to use a geographic CRS along with spherical distances, as these better reflect the curved nature of the Earth's surface.\n\n### EPSG codes\n\nAn **EPSG code** is a unique identifier that defines a CRS. These codes, managed by the **European Petroleum Survey Group (EPSG)**, are widely used in geographic information systems (GIS) to simplify the use of specific projections, ensuring that spatial data is correctly aligned and interpreted. Each EPSG code corresponds to a unique CRS or map projection, making it easier to standardize and manage spatial data from different sources.\n\nSome key and often used EPSG codes are:\n\n-   **EPSG:4326**: This code represents **WGS84**, the most commonly used geographic CRS, which uses latitude and longitude to describe locations on the Earth's surface. It is the default CRS for global datasets and GPS systems.\n\n-   **EPSG:326XX**: These codes represent the **UTM (Universal Transverse Mercator)** projection, which divides the world into zones. Each zone is optimized to preserve local distances and areas. For example (e.g. EPSG:32629: UTM Zone 29N, covering parts of Western Africa, including Liberia)\n\n-   **EPSG:3857**: This code is for the **Web Mercator projection**, which is widely used for web mapping services, including **Google Maps**, **OpenStreetMap**, and **Bing Maps**. This projected CRS uses meters as the unit of distance and is optimized for visualizing maps on a 2D plane, though it distorts area and distance, especially at high latitudes. It is well-suited for interactive online mapping but not ideal for precise distance-based geostatistical analyses.\n\nFor a more in-depth discussion on how to choose an appropriate CRS, we recommend referring to the excellent treatment in [*Geocomputation with R*](https://r.geocompx.org) [@Lovelace2020-iq], especially [Section 7.6: Which CRS?](https://r.geocompx.org/reproj-geo-data#which-crs).\n\n\n### Convert a data frame to an `sf` object\n\nIn geospatial analysis, data is often provided in tabular formats like CSV files that contain spatial coordinates (e.g., latitude and longitude). To use these data effectively in R, it is necessary to convert the data frame into an `sf` object, which is the standard format for working with spatial data in R. Here we show how to achieve this, we can use the Liberia data available in the `RiskMap` package as it is a data frame.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load the RiskMap package\nlibrary(RiskMap)\n\n# Load the Liberia data set\ndata(\"liberia\")\n\n# Convert the data frame to an sf object\nliberia_sf <- st_as_sf(liberia, \n                       coords = c(\"long\", \"lat\"), \n                       crs = 4326)\n\n# Inspect the new sf object\nliberia_sf\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"ntest\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"npos\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"elevation\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"log_elevation\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"geometry\"],\"name\":[5],\"type\":[\"sf_POINT\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"50\",\"2\":\"14\",\"3\":\"17.82621\",\"4\":\"2.880670\",\"5\":\"<sf_POINT>\",\"_rn_\":\"1\"},{\"1\":\"46\",\"2\":\"10\",\"3\":\"104.85070\",\"4\":\"4.652537\",\"5\":\"<sf_POINT>\",\"_rn_\":\"2\"},{\"1\":\"43\",\"2\":\"11\",\"3\":\"119.09543\",\"4\":\"4.779925\",\"5\":\"<sf_POINT>\",\"_rn_\":\"3\"},{\"1\":\"50\",\"2\":\"10\",\"3\":\"144.10921\",\"4\":\"4.970571\",\"5\":\"<sf_POINT>\",\"_rn_\":\"4\"},{\"1\":\"48\",\"2\":\"9\",\"3\":\"19.03508\",\"4\":\"2.946283\",\"5\":\"<sf_POINT>\",\"_rn_\":\"5\"},{\"1\":\"50\",\"2\":\"13\",\"3\":\"16.99954\",\"4\":\"2.833186\",\"5\":\"<sf_POINT>\",\"_rn_\":\"6\"},{\"1\":\"43\",\"2\":\"9\",\"3\":\"137.75360\",\"4\":\"4.925467\",\"5\":\"<sf_POINT>\",\"_rn_\":\"7\"},{\"1\":\"50\",\"2\":\"11\",\"3\":\"101.75000\",\"4\":\"4.622519\",\"5\":\"<sf_POINT>\",\"_rn_\":\"8\"},{\"1\":\"47\",\"2\":\"11\",\"3\":\"147.12867\",\"4\":\"4.991308\",\"5\":\"<sf_POINT>\",\"_rn_\":\"9\"},{\"1\":\"43\",\"2\":\"0\",\"3\":\"26.61054\",\"4\":\"3.281308\",\"5\":\"<sf_POINT>\",\"_rn_\":\"10\"},{\"1\":\"43\",\"2\":\"1\",\"3\":\"126.85216\",\"4\":\"4.843022\",\"5\":\"<sf_POINT>\",\"_rn_\":\"11\"},{\"1\":\"48\",\"2\":\"10\",\"3\":\"191.12602\",\"4\":\"5.252933\",\"5\":\"<sf_POINT>\",\"_rn_\":\"12\"},{\"1\":\"48\",\"2\":\"1\",\"3\":\"72.26974\",\"4\":\"4.280405\",\"5\":\"<sf_POINT>\",\"_rn_\":\"13\"},{\"1\":\"50\",\"2\":\"1\",\"3\":\"83.05280\",\"4\":\"4.419477\",\"5\":\"<sf_POINT>\",\"_rn_\":\"14\"},{\"1\":\"50\",\"2\":\"9\",\"3\":\"179.05409\",\"4\":\"5.187688\",\"5\":\"<sf_POINT>\",\"_rn_\":\"15\"},{\"1\":\"43\",\"2\":\"7\",\"3\":\"219.63379\",\"4\":\"5.391962\",\"5\":\"<sf_POINT>\",\"_rn_\":\"16\"},{\"1\":\"50\",\"2\":\"10\",\"3\":\"275.38584\",\"4\":\"5.618173\",\"5\":\"<sf_POINT>\",\"_rn_\":\"17\"},{\"1\":\"47\",\"2\":\"15\",\"3\":\"168.74192\",\"4\":\"5.128370\",\"5\":\"<sf_POINT>\",\"_rn_\":\"18\"},{\"1\":\"49\",\"2\":\"17\",\"3\":\"153.82902\",\"4\":\"5.035842\",\"5\":\"<sf_POINT>\",\"_rn_\":\"19\"},{\"1\":\"43\",\"2\":\"15\",\"3\":\"182.72222\",\"4\":\"5.207967\",\"5\":\"<sf_POINT>\",\"_rn_\":\"20\"},{\"1\":\"45\",\"2\":\"7\",\"3\":\"209.68256\",\"4\":\"5.345595\",\"5\":\"<sf_POINT>\",\"_rn_\":\"21\"},{\"1\":\"49\",\"2\":\"10\",\"3\":\"293.68001\",\"4\":\"5.682491\",\"5\":\"<sf_POINT>\",\"_rn_\":\"22\"},{\"1\":\"50\",\"2\":\"9\",\"3\":\"266.37234\",\"4\":\"5.584895\",\"5\":\"<sf_POINT>\",\"_rn_\":\"23\"},{\"1\":\"41\",\"2\":\"8\",\"3\":\"391.74481\",\"4\":\"5.970611\",\"5\":\"<sf_POINT>\",\"_rn_\":\"24\"},{\"1\":\"50\",\"2\":\"14\",\"3\":\"328.63853\",\"4\":\"5.794958\",\"5\":\"<sf_POINT>\",\"_rn_\":\"25\"},{\"1\":\"50\",\"2\":\"13\",\"3\":\"243.03890\",\"4\":\"5.493222\",\"5\":\"<sf_POINT>\",\"_rn_\":\"26\"},{\"1\":\"43\",\"2\":\"8\",\"3\":\"248.74826\",\"4\":\"5.516441\",\"5\":\"<sf_POINT>\",\"_rn_\":\"27\"},{\"1\":\"50\",\"2\":\"12\",\"3\":\"261.13335\",\"4\":\"5.565031\",\"5\":\"<sf_POINT>\",\"_rn_\":\"28\"},{\"1\":\"45\",\"2\":\"9\",\"3\":\"314.68551\",\"4\":\"5.751574\",\"5\":\"<sf_POINT>\",\"_rn_\":\"29\"},{\"1\":\"42\",\"2\":\"8\",\"3\":\"235.96129\",\"4\":\"5.463668\",\"5\":\"<sf_POINT>\",\"_rn_\":\"30\"},{\"1\":\"49\",\"2\":\"11\",\"3\":\"324.14160\",\"4\":\"5.781180\",\"5\":\"<sf_POINT>\",\"_rn_\":\"31\"},{\"1\":\"50\",\"2\":\"9\",\"3\":\"368.04498\",\"4\":\"5.908205\",\"5\":\"<sf_POINT>\",\"_rn_\":\"32\"},{\"1\":\"50\",\"2\":\"14\",\"3\":\"355.43776\",\"4\":\"5.873350\",\"5\":\"<sf_POINT>\",\"_rn_\":\"33\"},{\"1\":\"50\",\"2\":\"16\",\"3\":\"528.46907\",\"4\":\"6.269984\",\"5\":\"<sf_POINT>\",\"_rn_\":\"34\"},{\"1\":\"50\",\"2\":\"12\",\"3\":\"43.45274\",\"4\":\"3.771674\",\"5\":\"<sf_POINT>\",\"_rn_\":\"35\"},{\"1\":\"46\",\"2\":\"14\",\"3\":\"106.91602\",\"4\":\"4.672044\",\"5\":\"<sf_POINT>\",\"_rn_\":\"36\"},{\"1\":\"50\",\"2\":\"4\",\"3\":\"26.98081\",\"4\":\"3.295126\",\"5\":\"<sf_POINT>\",\"_rn_\":\"37\"},{\"1\":\"50\",\"2\":\"3\",\"3\":\"16.39052\",\"4\":\"2.796703\",\"5\":\"<sf_POINT>\",\"_rn_\":\"38\"},{\"1\":\"46\",\"2\":\"10\",\"3\":\"62.49984\",\"4\":\"4.135164\",\"5\":\"<sf_POINT>\",\"_rn_\":\"39\"},{\"1\":\"50\",\"2\":\"10\",\"3\":\"59.90005\",\"4\":\"4.092677\",\"5\":\"<sf_POINT>\",\"_rn_\":\"40\"},{\"1\":\"50\",\"2\":\"6\",\"3\":\"28.54618\",\"4\":\"3.351523\",\"5\":\"<sf_POINT>\",\"_rn_\":\"41\"},{\"1\":\"43\",\"2\":\"5\",\"3\":\"15.95256\",\"4\":\"2.769619\",\"5\":\"<sf_POINT>\",\"_rn_\":\"42\"},{\"1\":\"50\",\"2\":\"10\",\"3\":\"67.85720\",\"4\":\"4.217405\",\"5\":\"<sf_POINT>\",\"_rn_\":\"43\"},{\"1\":\"43\",\"2\":\"1\",\"3\":\"11.74960\",\"4\":\"2.463819\",\"5\":\"<sf_POINT>\",\"_rn_\":\"44\"},{\"1\":\"50\",\"2\":\"9\",\"3\":\"154.26286\",\"4\":\"5.038658\",\"5\":\"<sf_POINT>\",\"_rn_\":\"45\"},{\"1\":\"46\",\"2\":\"14\",\"3\":\"232.60584\",\"4\":\"5.449345\",\"5\":\"<sf_POINT>\",\"_rn_\":\"46\"},{\"1\":\"43\",\"2\":\"9\",\"3\":\"221.21223\",\"4\":\"5.399123\",\"5\":\"<sf_POINT>\",\"_rn_\":\"47\"},{\"1\":\"49\",\"2\":\"15\",\"3\":\"307.24208\",\"4\":\"5.727636\",\"5\":\"<sf_POINT>\",\"_rn_\":\"48\"},{\"1\":\"50\",\"2\":\"14\",\"3\":\"306.99560\",\"4\":\"5.726833\",\"5\":\"<sf_POINT>\",\"_rn_\":\"49\"},{\"1\":\"50\",\"2\":\"12\",\"3\":\"339.23185\",\"4\":\"5.826684\",\"5\":\"<sf_POINT>\",\"_rn_\":\"50\"},{\"1\":\"46\",\"2\":\"9\",\"3\":\"350.72552\",\"4\":\"5.860004\",\"5\":\"<sf_POINT>\",\"_rn_\":\"51\"},{\"1\":\"50\",\"2\":\"16\",\"3\":\"468.89988\",\"4\":\"6.150389\",\"5\":\"<sf_POINT>\",\"_rn_\":\"52\"},{\"1\":\"50\",\"2\":\"10\",\"3\":\"350.43568\",\"4\":\"5.859177\",\"5\":\"<sf_POINT>\",\"_rn_\":\"53\"},{\"1\":\"44\",\"2\":\"9\",\"3\":\"462.81669\",\"4\":\"6.137331\",\"5\":\"<sf_POINT>\",\"_rn_\":\"54\"},{\"1\":\"50\",\"2\":\"11\",\"3\":\"461.43930\",\"4\":\"6.134351\",\"5\":\"<sf_POINT>\",\"_rn_\":\"55\"},{\"1\":\"43\",\"2\":\"8\",\"3\":\"530.01579\",\"4\":\"6.272907\",\"5\":\"<sf_POINT>\",\"_rn_\":\"56\"},{\"1\":\"50\",\"2\":\"14\",\"3\":\"524.92094\",\"4\":\"6.263248\",\"5\":\"<sf_POINT>\",\"_rn_\":\"57\"},{\"1\":\"48\",\"2\":\"10\",\"3\":\"509.12362\",\"4\":\"6.232691\",\"5\":\"<sf_POINT>\",\"_rn_\":\"58\"},{\"1\":\"50\",\"2\":\"11\",\"3\":\"585.21129\",\"4\":\"6.371973\",\"5\":\"<sf_POINT>\",\"_rn_\":\"59\"},{\"1\":\"43\",\"2\":\"10\",\"3\":\"420.64098\",\"4\":\"6.041780\",\"5\":\"<sf_POINT>\",\"_rn_\":\"60\"},{\"1\":\"42\",\"2\":\"9\",\"3\":\"413.50931\",\"4\":\"6.024680\",\"5\":\"<sf_POINT>\",\"_rn_\":\"61\"},{\"1\":\"45\",\"2\":\"1\",\"3\":\"30.28219\",\"4\":\"3.410560\",\"5\":\"<sf_POINT>\",\"_rn_\":\"62\"},{\"1\":\"50\",\"2\":\"3\",\"3\":\"29.04470\",\"4\":\"3.368836\",\"5\":\"<sf_POINT>\",\"_rn_\":\"63\"},{\"1\":\"47\",\"2\":\"1\",\"3\":\"12.56866\",\"4\":\"2.531207\",\"5\":\"<sf_POINT>\",\"_rn_\":\"64\"},{\"1\":\"50\",\"2\":\"10\",\"3\":\"67.58882\",\"4\":\"4.213443\",\"5\":\"<sf_POINT>\",\"_rn_\":\"65\"},{\"1\":\"41\",\"2\":\"9\",\"3\":\"39.58975\",\"4\":\"3.678570\",\"5\":\"<sf_POINT>\",\"_rn_\":\"66\"},{\"1\":\"50\",\"2\":\"8\",\"3\":\"131.33305\",\"4\":\"4.877736\",\"5\":\"<sf_POINT>\",\"_rn_\":\"67\"},{\"1\":\"48\",\"2\":\"1\",\"3\":\"10.60796\",\"4\":\"2.361604\",\"5\":\"<sf_POINT>\",\"_rn_\":\"68\"},{\"1\":\"40\",\"2\":\"3\",\"3\":\"21.68275\",\"4\":\"3.076517\",\"5\":\"<sf_POINT>\",\"_rn_\":\"69\"},{\"1\":\"50\",\"2\":\"4\",\"3\":\"59.05072\",\"4\":\"4.078397\",\"5\":\"<sf_POINT>\",\"_rn_\":\"70\"},{\"1\":\"44\",\"2\":\"8\",\"3\":\"74.88933\",\"4\":\"4.316011\",\"5\":\"<sf_POINT>\",\"_rn_\":\"71\"},{\"1\":\"50\",\"2\":\"10\",\"3\":\"97.90856\",\"4\":\"4.584034\",\"5\":\"<sf_POINT>\",\"_rn_\":\"72\"},{\"1\":\"42\",\"2\":\"9\",\"3\":\"132.04637\",\"4\":\"4.883153\",\"5\":\"<sf_POINT>\",\"_rn_\":\"73\"},{\"1\":\"49\",\"2\":\"2\",\"3\":\"27.77351\",\"4\":\"3.324083\",\"5\":\"<sf_POINT>\",\"_rn_\":\"74\"},{\"1\":\"40\",\"2\":\"2\",\"3\":\"19.23788\",\"4\":\"2.956881\",\"5\":\"<sf_POINT>\",\"_rn_\":\"75\"},{\"1\":\"50\",\"2\":\"4\",\"3\":\"34.36730\",\"4\":\"3.537105\",\"5\":\"<sf_POINT>\",\"_rn_\":\"76\"},{\"1\":\"50\",\"2\":\"11\",\"3\":\"117.13212\",\"4\":\"4.763303\",\"5\":\"<sf_POINT>\",\"_rn_\":\"77\"},{\"1\":\"46\",\"2\":\"10\",\"3\":\"58.78720\",\"4\":\"4.073924\",\"5\":\"<sf_POINT>\",\"_rn_\":\"78\"},{\"1\":\"50\",\"2\":\"10\",\"3\":\"196.56726\",\"4\":\"5.281005\",\"5\":\"<sf_POINT>\",\"_rn_\":\"79\"},{\"1\":\"50\",\"2\":\"8\",\"3\":\"222.79488\",\"4\":\"5.406252\",\"5\":\"<sf_POINT>\",\"_rn_\":\"80\"},{\"1\":\"48\",\"2\":\"11\",\"3\":\"71.72164\",\"4\":\"4.272793\",\"5\":\"<sf_POINT>\",\"_rn_\":\"81\"},{\"1\":\"50\",\"2\":\"12\",\"3\":\"112.04979\",\"4\":\"4.718943\",\"5\":\"<sf_POINT>\",\"_rn_\":\"82\"},{\"1\":\"40\",\"2\":\"7\",\"3\":\"261.60762\",\"4\":\"5.566846\",\"5\":\"<sf_POINT>\",\"_rn_\":\"83\"},{\"1\":\"50\",\"2\":\"6\",\"3\":\"255.48200\",\"4\":\"5.543152\",\"5\":\"<sf_POINT>\",\"_rn_\":\"84\"},{\"1\":\"48\",\"2\":\"10\",\"3\":\"204.13043\",\"4\":\"5.318759\",\"5\":\"<sf_POINT>\",\"_rn_\":\"85\"},{\"1\":\"50\",\"2\":\"13\",\"3\":\"210.40515\",\"4\":\"5.349035\",\"5\":\"<sf_POINT>\",\"_rn_\":\"86\"},{\"1\":\"50\",\"2\":\"9\",\"3\":\"238.36232\",\"4\":\"5.473792\",\"5\":\"<sf_POINT>\",\"_rn_\":\"87\"},{\"1\":\"50\",\"2\":\"10\",\"3\":\"295.52640\",\"4\":\"5.688758\",\"5\":\"<sf_POINT>\",\"_rn_\":\"88\"},{\"1\":\"43\",\"2\":\"9\",\"3\":\"168.63179\",\"4\":\"5.127718\",\"5\":\"<sf_POINT>\",\"_rn_\":\"89\"},{\"1\":\"50\",\"2\":\"11\",\"3\":\"281.69646\",\"4\":\"5.640830\",\"5\":\"<sf_POINT>\",\"_rn_\":\"90\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n\n```{.r .cell-code}\npar(mar = c(0, 0, 0, 0))  #| hide_line\nplot(liberia_sf)\n```\n\n::: {.cell-output-display}\n![](02_handling-spatial-data_files/figure-html/st-as-sf-1.png)\n:::\n:::\n\n\n\n\n\n\n\n\nThe `st_as_sf()` function converts the data frame into an `sf` object. The `coords` argument specifies which columns contain the spatial coordinates and the `crs` argument assigns the CRS that in this case we know being WGS84 (EPSG:4326). The `sf` object can now be used for operations such as spatial joins, distance calculations, and mapping with other spatial layers. Note that the columns containing the spatial coordinates have been replaced by a `geometry` column, which now stores this information. If you would like to retain the original coordinate columns in the output, you can set the `remove` argument to `FALSE` when converting the data frame to an `sf` object.\n\n### Working with CRSs in R\n\nWhen working with data from multiple sources, such as environmental layers, population data, or administrative boundaries, ensuring that all datasets share the same CRS is essential for accurate spatial analysis. This section covers the core tasks involved in managing CRSs in R: checking the CRS of spatial data to ensure datasets are compatible and reprojecting spatial data into a common CRS when necessary.\n\n#### Checking the CRS of Spatial Data\n\nBefore performing any spatial operation, it's crucial to check the CRS of your spatial datasets. Knowing whether your data uses geographic coordinates (e.g., WGS84) or a projected coordinate system (e.g., UTM) helps ensure that they are aligned and ready for analysis. Both `sf` and `terra` provide functions to retrieve and inspect the CRS, ensuring datasets are spatially aligned before analysis. The `st_crs()` function retrieves the CRS information for vector data.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check the CRS of the vector data\nst_crs(liberia_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\nCoordinate Reference System:\n  User input: EPSG:4326 \n  wkt:\nGEOGCRS[\"WGS 84\",\n    ENSEMBLE[\"World Geodetic System 1984 ensemble\",\n        MEMBER[\"World Geodetic System 1984 (Transit)\"],\n        MEMBER[\"World Geodetic System 1984 (G730)\"],\n        MEMBER[\"World Geodetic System 1984 (G873)\"],\n        MEMBER[\"World Geodetic System 1984 (G1150)\"],\n        MEMBER[\"World Geodetic System 1984 (G1674)\"],\n        MEMBER[\"World Geodetic System 1984 (G1762)\"],\n        MEMBER[\"World Geodetic System 1984 (G2139)\"],\n        ELLIPSOID[\"WGS 84\",6378137,298.257223563,\n            LENGTHUNIT[\"metre\",1]],\n        ENSEMBLEACCURACY[2.0]],\n    PRIMEM[\"Greenwich\",0,\n        ANGLEUNIT[\"degree\",0.0174532925199433]],\n    CS[ellipsoidal,2],\n        AXIS[\"geodetic latitude (Lat)\",north,\n            ORDER[1],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n        AXIS[\"geodetic longitude (Lon)\",east,\n            ORDER[2],\n            ANGLEUNIT[\"degree\",0.0174532925199433]],\n    USAGE[\n        SCOPE[\"Horizontal component of 3D system.\"],\n        AREA[\"World.\"],\n        BBOX[-90,-180,90,180]],\n    ID[\"EPSG\",4326]]\n```\n\n\n:::\n:::\n\n\n\n\n\n\n\n\nThe same can be achieved for raster data with the `crs()` function from the `terra` package.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Check the CRS of the raster data\ncrs(lbr_pop_100, proj = TRUE, describe = TRUE)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"name\"],\"name\":[1],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"authority\"],\"name\":[2],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"code\"],\"name\":[3],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"area\"],\"name\":[4],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"extent\"],\"name\":[5],\"type\":[\"list\"],\"align\":[\"right\"]},{\"label\":[\"proj\"],\"name\":[6],\"type\":[\"chr\"],\"align\":[\"left\"]}],\"data\":[{\"1\":\"WGS 84\",\"2\":\"EPSG\",\"3\":\"4326\",\"4\":\"World\",\"5\":\"<dbl [4]>\",\"6\":\"+proj=longlat +datum=WGS84 +no_defs\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\n\n\n#### Reprojecting spatial data to a common CRS\n\nIf your datasets have different CRSs or if you want to change CRS (e.g. from geographical to projected) you will need to reproject one or more datasets so they can be spatially aligned. This ensures that they can be overlaid and analyzed together. For vector data, `st_transform()` reprojects the data into a specified CRS. This example transforms the liberia point data from WGS84 into UTM. To know what's the correct UTM zone and hence EPSG code for Liberia we can use the `propose_utm` function from the `RiskMap` package.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Obtain EPSG code for UTM for Liberia\npropose_utm(liberia_sf)\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] 32629\n```\n\n\n:::\n\n```{.r .cell-code}\n# Reproject the vector data \nliberia_sf_utm <- st_transform(liberia_sf, crs = propose_utm(liberia_sf))\n```\n:::\n\n\n\n\n\n\n\n\nReprojecting raster data is more complex than reprojecting vector data due to the continuous nature of raster grids. The process involves recalculating cell values to fit a new grid based on the new CRS, which can lead to challenges like resampling, distortion, and data loss. When reprojecting a raster, the grid must adjust to the new CRS, often requiring resampling of cell values. The method you choose depends on the data type: **nearest neighbor** is best for categorical data like land use while **bilinear or cubic interpolation** is good for continuous data like temperature, where smooth transitions are needed.\n\nThe function `project()` from the `terra` package can be used to project a raster.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlbr_pop_100_utm <- project(lbr_pop_100, \n                           crs(liberia_sf_utm),\n                           method = \"bilinear\")\n```\n:::\n\n\n\n\n\n\n\n\nReprojecting a raster may alter its resolution. For example, reprojecting from geographic (degrees) to projected (meters) CRS can result in a mismatch between the original and new cell sizes. Moreover, distortion can occur when converting between projections, especially at high latitudes. Some cells may be stretched or compressed, leading to potential loss of information or edge artifacts. These distortions arise because the Earth is not flat, and projecting the curved surface of the Earth onto a flat plane (or vice versa) leads to trade-offs. For example, the Mercator projection preserves angles and shapes but distorts area, particularly near the poles.\n\nFor these reasons, it's often better to reproject vectors rather than rasters when both data types are used together and avoid as much as possible to change the CRS of rasters. One way to achieve this is to work with WGS84 when performing all spatial operations like extraction of covariates from rasters and then transform only the point data to a projected CRS before fitting the model.\n\n## Extracting covariate data\n\nIn geostatistical models, the inclusion of relevant covariates (environmental, demographic, or climatic) can potentially enhance predictive accuracy. Covariate data often come from raster or polygon sources, and extracting these values for point locations is essential to link spatial context to point-referenced data. These covariates could include variables like temperature, elevation, land cover, or population density, which influence the spatial distribution of diseases. In this section, we will cover how to extract covariates at point locations from both polygon and raster layers.\n\n#### Extracting covariates from polygon layers\n\nPolygon layers represent discrete spatial features such as administrative boundaries, land cover categories, or protected areas. These layers typically include associated attributes (e.g. region names, population totals, land type), which can serve as covariates in geostatistical models. A common task in spatial data analysis is to assign attributes from a polygon layer to a set of point-referenced data, for example, determining the administrative region or land use category that each survey location falls within. This is done using a **spatial join**, which overlays the point and polygon layers and attaches the attributes of the enclosing polygon to each point. Below is an example where we assign administrative region names (admin1) to a set of point locations in Liberia:\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Perform a spatial join to transfer polygon attributes to the points\npoints_with_admin <- st_join(liberia_sf, liberia_admin1[\"shapeName\"])\n\n# View the results, points now include covariates from the polygon layer\nhead(points_with_admin)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"ntest\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"npos\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"elevation\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"log_elevation\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"shapeName\"],\"name\":[5],\"type\":[\"chr\"],\"align\":[\"left\"]},{\"label\":[\"geometry\"],\"name\":[6],\"type\":[\"sf_POINT\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"50\",\"2\":\"14\",\"3\":\"17.82621\",\"4\":\"2.880670\",\"5\":\"Margibi\",\"6\":\"<sf_POINT>\",\"_rn_\":\"1\"},{\"1\":\"46\",\"2\":\"10\",\"3\":\"104.85070\",\"4\":\"4.652537\",\"5\":\"Montserrado\",\"6\":\"<sf_POINT>\",\"_rn_\":\"2\"},{\"1\":\"43\",\"2\":\"11\",\"3\":\"119.09543\",\"4\":\"4.779925\",\"5\":\"Margibi\",\"6\":\"<sf_POINT>\",\"_rn_\":\"3\"},{\"1\":\"50\",\"2\":\"10\",\"3\":\"144.10921\",\"4\":\"4.970571\",\"5\":\"Margibi\",\"6\":\"<sf_POINT>\",\"_rn_\":\"4\"},{\"1\":\"48\",\"2\":\"9\",\"3\":\"19.03508\",\"4\":\"2.946283\",\"5\":\"Grand Bassa\",\"6\":\"<sf_POINT>\",\"_rn_\":\"5\"},{\"1\":\"50\",\"2\":\"13\",\"3\":\"16.99954\",\"4\":\"2.833186\",\"5\":\"Grand Bassa\",\"6\":\"<sf_POINT>\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\n\n\n\nThis spatial join enriches each point with the corresponding polygon attribute, in this case, the admin1 name (shapeName). These attributes can then be used as categorical covariates in geostatistical models to account for regional variation in disease risk or programmatic coverage.\n\n### Extracting covariates from raster layers\n\nRaster data provides continuous spatial information, such as elevation, climate data, or population density. Covariate values from raster layers can be extracted for specific points using the **`extract()`** function from the `terra` package. Each point will receive the value of the raster cell it overlaps.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract raster values at the point locations\ncovariate_values <- extract(lbr_pop_100, liberia_sf)\n\n# Combine the extracted values with the point data\nliberia_sf$pop_total <- covariate_values[, 2]\n\n# View the updated dataset\nhead(liberia_sf)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"ntest\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"npos\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"elevation\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"log_elevation\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"geometry\"],\"name\":[5],\"type\":[\"sf_POINT\"],\"align\":[\"right\"]},{\"label\":[\"pop_total\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"50\",\"2\":\"14\",\"3\":\"17.82621\",\"4\":\"2.880670\",\"5\":\"<sf_POINT>\",\"6\":\"0.2914019\",\"_rn_\":\"1\"},{\"1\":\"46\",\"2\":\"10\",\"3\":\"104.85070\",\"4\":\"4.652537\",\"5\":\"<sf_POINT>\",\"6\":\"0.6087928\",\"_rn_\":\"2\"},{\"1\":\"43\",\"2\":\"11\",\"3\":\"119.09543\",\"4\":\"4.779925\",\"5\":\"<sf_POINT>\",\"6\":\"0.2044306\",\"_rn_\":\"3\"},{\"1\":\"50\",\"2\":\"10\",\"3\":\"144.10921\",\"4\":\"4.970571\",\"5\":\"<sf_POINT>\",\"6\":\"0.5078438\",\"_rn_\":\"4\"},{\"1\":\"48\",\"2\":\"9\",\"3\":\"19.03508\",\"4\":\"2.946283\",\"5\":\"<sf_POINT>\",\"6\":\"0.1767686\",\"_rn_\":\"5\"},{\"1\":\"50\",\"2\":\"13\",\"3\":\"16.99954\",\"4\":\"2.833186\",\"5\":\"<sf_POINT>\",\"6\":\"1.6693381\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\n\n\nIn this example, the `extract()` function assigns the raster value from the population density layer to each point in the dataset. This allows the point data to include population density as a covariate in the analysis.\n\nInstead of extracting values for exact point locations, it can sometimes be useful to aggregate covariate values within a defined area around each point. This is often done by creating a buffer around each point and calculating summary statistics (e.g., mean, sum) of the raster values within that buffer. For instance, you might want to calculate the average population density or temperature within a 5 km radius around each point to smooth out fine-scale variation.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Create buffers around each point (e.g., 5 km radius)\nbuffered_points <- st_buffer(liberia_sf_utm, dist = 5000)  \n\n# Plot the buffers for visualization\npar(mar = c(0, 0, 0, 0))  #| hide_line\nplot(st_geometry(buffered_points), border = \"black\")\nplot(st_geometry(liberia_sf_utm), add = T, pch = 19, col = \"red\", cex = .2)\n```\n\n::: {.cell-output-display}\n![Survey locations (red dots) surrounded by a 5 km buffer (dark circles).](02_handling-spatial-data_files/figure-html/fig-buffer-extract-1.png){#fig-buffer-extract}\n:::\n:::\n\n::: {.cell}\n\n```{.r .cell-code}\n# Extract raster values within the buffer areas and calculate the \n# mean or sum. Note that since we used the utm data to work on the\n# meter scale we need to convert them back to WGS84\nmean_pop_density <- extract(lbr_pop_100, \n                            st_transform(buffered_points, crs = 4326),\n                            fun = mean, na.rm = TRUE)\n\n# Add the averaged values to the points dataset\nliberia_sf$pop_mean5km <- mean_pop_density[,2]\n\n# View the updated dataset\nhead(liberia_sf)\n```\n\n::: {.cell-output-display}\n`````{=html}\n<div data-pagedtable=\"false\">\n  <script data-pagedtable-source type=\"application/json\">\n{\"columns\":[{\"label\":[\"\"],\"name\":[\"_rn_\"],\"type\":[\"\"],\"align\":[\"left\"]},{\"label\":[\"ntest\"],\"name\":[1],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"npos\"],\"name\":[2],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"elevation\"],\"name\":[3],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"log_elevation\"],\"name\":[4],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"geometry\"],\"name\":[5],\"type\":[\"sf_POINT\"],\"align\":[\"right\"]},{\"label\":[\"pop_total\"],\"name\":[6],\"type\":[\"dbl\"],\"align\":[\"right\"]},{\"label\":[\"pop_mean5km\"],\"name\":[7],\"type\":[\"dbl\"],\"align\":[\"right\"]}],\"data\":[{\"1\":\"50\",\"2\":\"14\",\"3\":\"17.82621\",\"4\":\"2.880670\",\"5\":\"<sf_POINT>\",\"6\":\"0.2914019\",\"7\":\"0.6015397\",\"_rn_\":\"1\"},{\"1\":\"46\",\"2\":\"10\",\"3\":\"104.85070\",\"4\":\"4.652537\",\"5\":\"<sf_POINT>\",\"6\":\"0.6087928\",\"7\":\"0.5565529\",\"_rn_\":\"2\"},{\"1\":\"43\",\"2\":\"11\",\"3\":\"119.09543\",\"4\":\"4.779925\",\"5\":\"<sf_POINT>\",\"6\":\"0.2044306\",\"7\":\"0.2488039\",\"_rn_\":\"3\"},{\"1\":\"50\",\"2\":\"10\",\"3\":\"144.10921\",\"4\":\"4.970571\",\"5\":\"<sf_POINT>\",\"6\":\"0.5078438\",\"7\":\"0.5604327\",\"_rn_\":\"4\"},{\"1\":\"48\",\"2\":\"9\",\"3\":\"19.03508\",\"4\":\"2.946283\",\"5\":\"<sf_POINT>\",\"6\":\"0.1767686\",\"7\":\"0.2877019\",\"_rn_\":\"5\"},{\"1\":\"50\",\"2\":\"13\",\"3\":\"16.99954\",\"4\":\"2.833186\",\"5\":\"<sf_POINT>\",\"6\":\"1.6693381\",\"7\":\"2.0974484\",\"_rn_\":\"6\"}],\"options\":{\"columns\":{\"min\":{},\"max\":[10]},\"rows\":{\"min\":[10],\"max\":[10]},\"pages\":{}}}\n  </script>\n</div>\n`````\n:::\n:::\n\n\n\n\n\n\n\n\nYou can modify the `fun` argument to calculate other summary statistics, such as the sum, min or max of the raster values within the buffer. This approach is particularly useful when the phenomenon being modeled (e.g., disease transmission) is influenced by broader spatial factors around the observation point, rather than just the value at the exact point location.\n\n## Creating a predictive grid\n\nA predictive grid is a regularly spaced set of points or cells that spans the study region. This grid serves as the basis for predictions made by your model. The density of the grid (i.e., the distance between grid points) affects both the resolution of the prediction and the computational cost. For point-based predictions, we can generate a grid of points over a polygon (e.g., administrative boundary) using the `sf` package and the `st_make_grid` function.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# First we convert the Liberia boundaries to the UTM CRS\n# because we want our grid in meters\nliberia_admin0_utm <- liberia_admin0 |> \n  st_transform(crs = propose_utm(liberia_sf))\n\n# Generate prediction grid at 5km resolution\npred_locations <- st_make_grid(liberia_admin0_utm, \n                               cellsize = 5000, \n                               what = \"centers\")\n\n# Exclude locations that fall outside the study area\npred_locations <- st_intersection(pred_locations, liberia_admin0_utm)\n\n# Visualize the result\npar(mar = c(0, 0, 0, 0))  #| hide_line\nplot(liberia_admin0_utm$geometry, col = \"white\")\nplot(pred_locations, cex = .01, col = \"red\", pch = 19, add = T)\n```\n\n::: {.cell-output-display}\n![Prediction grid (5 km spacing) created within the boundaries of Liberia. Points are spaced regularly in UTM coordinates and filtered to remain within the national boundary.](02_handling-spatial-data_files/figure-html/fig-pred-grid-1.png){#fig-pred-grid}\n:::\n:::\n\n\n\n\n\n\n\n\n## Visualizing spatial data\n\nVisualization is a key part of spatial data analysis, as it allows you to explore and communicate spatial patterns and relationships effectively. R provides a lot of functionalities to visualize spatial data and create very beautiful maps. Until now we have used basic plotting functions. Here we introduce the `ggplot2` package that allows to combine different types of geographic data in a map. The `ggplot2` package in R provides a flexible and powerful framework for creating both simple and complex visualizations, including maps of point data, polygons, and rasters. With the help of extensions like `geom_sf()` and `geom_raster()`, `ggplot2` makes it easy to visualize spatial data, whether you're working with point locations, polygons, or continuous raster data.\n\n### Visualizing point data\n\nPoint data often represents the locations of observations (e.g., disease cases, sampling sites). `ggplot2` allows you to plot these points and optionally color them by a covariate (e.g., disease prevalence or population density). Here is an example that uses the Liberia data.\n\n\n\n\n\n\n\n\n::: {#fig-ggplot-points .cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(ggplot2)\n\n# Create a new variable with prevalence in the dataset\nliberia_sf$prevalence <- liberia$npos / liberia$ntest\n\n# Plot only the locations\nggplot(data = liberia_sf) +\n  geom_sf(col = \"black\") +  \n  theme_minimal() +\n  labs(title = \"Survey locations\")\n\n# Color the points according to prevalence\nggplot(data = liberia_sf) +\n  geom_sf(aes(color = prevalence)) +  \n  scale_color_viridis_c(labels = scales::label_percent()) +  \n  theme_minimal() +\n  labs(title = \"Onchocerciasis in Liberia\",\n       color = \"Prevalence (%)\")\n```\n\n::: {.cell-output-display}\n![Survey locations.](02_handling-spatial-data_files/figure-html/fig-ggplot-points-1.png){#fig-ggplot-points-1}\n:::\n\n::: {.cell-output-display}\n![Survey locations colored by prevalence.](02_handling-spatial-data_files/figure-html/fig-ggplot-points-2.png){#fig-ggplot-points-2}\n:::\n\nUsing `geom_sf()` to plot point data.\n\n:::\n\n\n\n\n\n\n\n\nHere `geom_sf()` is used to plot the spatial points. `aes(color = prevalence)` specifies that the points should be colored based on the `prevalence` covariate, providing a visual representation of spatial variation in disease risk. The `scale_color_viridis_c()` function applies the Viridis color scale, which is well-suited for continuous data and is friendly for those with color blindness. The `labels = scales::label_percent()` argument ensures that the color scale's labels are displayed as percentages (e.g., 5, 10%) rather than raw decimal values. To make the plot visually clean and minimal, `theme_minimal()` is applied, stripping away unnecessary background elements and keeping the focus on the data. Finally, the `labs()` defines the plot title and the color legend label.\n\n### Visualizing polygon data\n\nPolygon data typically represents administrative boundaries, land use, or other regional divisions. We can still use `geom_sf()` to create maps of polygons, optionally filling them by a covariate.\n\n\n\n\n\n\n\n\n::: {#fig-ggplot-polygons .cell layout-ncol=\"2\"}\n\n```{.r .cell-code}\n# Plot Liberia admin 1 level boundaries \nggplot(data = liberia_admin1) +\n  geom_sf() + \n  theme_minimal() +\n  labs()\n\n# We compute the area of each polygon\nliberia_admin1$area <- as.numeric(st_area(liberia_admin1) / 1000 ^ 2)\n\n# Color the polygons according tis new variable\nggplot(data = liberia_admin1) +\n  geom_sf(aes(fill = area), color = \"black\") + \n  scale_fill_distiller(direction = -1) +\n  theme_minimal() +\n  labs(fill = \"Area km^2\")\n```\n\n::: {.cell-output-display}\n![Admin 1 units for Liberia.](02_handling-spatial-data_files/figure-html/fig-ggplot-polygons-1.png){#fig-ggplot-polygons-1}\n:::\n\n::: {.cell-output-display}\n![Admin 1 units colored according to their area.](02_handling-spatial-data_files/figure-html/fig-ggplot-polygons-2.png){#fig-ggplot-polygons-2}\n:::\n\nUsing `geom_sf()` to plot polygon data.\n\n:::\n\n\n\n\n\n\n\n\nIn this code, `aes(fill = area)` is used to fill each polygon with colors corresponding to its area. The `color = \"black\"` argument outlines the polygons in black, and you could set `fill = NA` to make the polygons transparent while still displaying the borders. The `scale_fill_distiller(direction = -1)` function applies a color gradient from ColorBrewer, with the `direction = -1` argument reversing the gradient (e.g., darker colors for larger areas).\n\n### Visualizing raster data\n\nIn `ggplot2`, you can visualize raster data by converting it into a data frame of coordinates and values. You can convert raster data into a format that `ggplot2` can handle by using the `as.data.frame()` function from `terra`.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Convert the raster to a data frame for ggplot2\nraster_df <- as.data.frame(log(lbr_pop_100), xy = TRUE)\n\n# Plot raster using ggplot2\nggplot(data = raster_df) +\n  geom_raster(aes(x = x, y = y, fill = lbr_ppp_2014)) + \n  scale_fill_viridis_c() +\n  coord_sf(crs = 4326) +\n  theme_minimal() +\n  labs(title = \"Population per 100m (log-scale)\",\n       fill = \"Density\", x = \"\", y = \"\") \n```\n\n::: {.cell-output-display}\n![Log-population in Liberia (2014) visualized as a raster using `geom_raster()` with Viridis color scale.](02_handling-spatial-data_files/figure-html/fig-ggplot-raster-1.png){#fig-ggplot-raster}\n:::\n:::\n\n\n\n\n\n\n\n\nIn this example `as.data.frame()` converts the raster into a data frame with x and y coordinates and their corresponding raster values and `geom_raster()` is used to plot the raster cells, coloring them based on the population density.\n\n### Combining Multiple Spatial Data Types\n\nIn many cases, it's useful to combine different spatial data types (points, polygons, and rasters) in a single visualization. `ggplot2` allows you to overlay these layers, providing a more comprehensive view of your spatial data.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Combine points, polygons, and raster data in one plot\ncombined_map <- ggplot() +\n  geom_raster(data = raster_df, aes(x = x, y = y, fill = lbr_ppp_2014)) + \n  geom_sf(data = liberia_admin1, fill = NA, color = \"black\") +    \n  geom_sf(data = liberia_sf, shape = 21, col = \"black\", fill = \"white\") +\n  scale_fill_viridis_c() +  \n  theme_minimal() +\n  labs(title = \"Combined Spatial Data: Points, Polygons, and Raster\",\n       fill = \"Population Density\",\n       x = \"\", y = \"\")\n\ncombined_map\n```\n\n::: {.cell-output-display}\n![Overlay of raster (population density), polygons (admin-1 boundaries), and points (survey locations) in a single `ggplot2` map.](02_handling-spatial-data_files/figure-html/fig-combined-map-1.png){#fig-combined-map}\n:::\n:::\n\n\n\n\n\n\n\n\nTo enhance spatial visualizations in `ggplot2`, adding a scale bar and a north arrow improves map readability and professionalism. The `ggspatial` package offers tools to easily integrate these elements into your maps. Below is an example that demonstrates how to use `ggspatial` to add a scale bar and north arrow to a map that includes raster, polygon, and point data.\n\n\n\n\n\n\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# Load necessary libraries\nlibrary(ggspatial)\n\n# Add scale bar and north arrow\ncombined_map +\n  annotation_scale(location = \"bl\", width_hint = 0.25) +  \n  annotation_north_arrow(location = \"tr\", which_north = \"true\", \n                         height = unit(.5, \"cm\"), width = unit(.5, \"cm\")) \n```\n\n::: {.cell-output-display}\n![Enhanced map with scale bar and north arrow added using the `ggspatial` package.](02_handling-spatial-data_files/figure-html/fig-map-elements-1.png){#fig-map-elements}\n:::\n:::\n\n\n\n\n\n\n\n\n## Review Questions\n\n- What are the main differences between raster and vector data, and in which scenarios is each type commonly used in geostatistical analysis?\n\n- Why is it important to ensure that spatial datasets share the same coordinate reference system (CRS)? What problems can arise if CRSs are mismatched?\n\n- What are the advantages of using a projected CRS (e.g., UTM) over a geographic CRS (e.g., WGS84) in geostatistical modeling?\n\n- Describe the purpose of creating a predictive grid. How does the resolution of this grid affect the model?\n\n- What is the difference between extracting raster values at a point location versus using a buffer around a point?\n\n\n## Exercises\n\n1. **Import and visualize shapefiles**: Download a shapefile of administrative boundaries for a country of your choice using the `rgeoboundaries` package. Visualize the boundaries using both base R and `ggplot2`.\n\n2. **Download and plot raster data**: Use either the `wpgpDownloadR` or `rgee` package to obtain raster data (e.g., elevation or population) for the same country. Plot it using `terra::plot()` and `ggplot2`.\n\n3. **Coordinate transformation**: Convert the CRS of both vector and raster datasets to UTM. Check the CRS before and after transformation and plot the results to confirm proper alignment.\n\n4. **Covariate extraction**: Sample 50 random points within your country boundary. Extract elevation or population values at each point and add them to the point data.\n\n5. **Buffered extraction**: Create a 2 km buffer around each point. Extract and summarize (e.g., mean) raster values within each buffer, then compare with the point-level values.\n\n6. **Create a predictive grid**: Build a 5 km prediction grid over your country and plot it along with the raster background. Prepare the grid for input into a geostatistical model by extracting covariates at each grid point.",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {
      "include-in-header": [
        "<link href=\"site_libs/pagedtable-1.1/css/pagedtable.css\" rel=\"stylesheet\" />\n<script src=\"site_libs/pagedtable-1.1/js/pagedtable.js\"></script>\n"
      ]
    },
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}